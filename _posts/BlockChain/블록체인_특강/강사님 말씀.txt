**햇갈리는 용어**

* **deploy**는 전개하다라는 뜻인데, 여기서 **토큰을 발행한다**라고 이해하자.

* **mint**는 nft토큰을 발행해서 **사람에게 주는것**

+ **pending**은 어떤 블록에 집어넣을지 고르고있는것.   
  시간지나면 **Indexing**이 뜨고 이는 블록이 거의 정해진것.   
  그 후 완료 상태는 **Success**


블록체인 분야 - 네트워크 전문가, 암호학 전문가, 소프트웨어 전문가  
따라서 관심이 있다면 이중에 하나를 파고드는게 좋치, 이 모든걸 하는 전문가는 없다고 봐도 된다.  
공부를 한다면 이런 기술을 중점으로 하기를 바라고, 블록체인을 응용하는 분야인 코인, NFT, 메타버스 등은 추후에 해도되니까

코인 - 수수료 절감 방법공부 등등... 이분야는 MIS(경영정보학)와 컴공 지식이 필요

Dapp - 소프트웨어 공학쪽  
software productline을 수정해서 Dapp을 좀더 편하게 만들게 구성해보는 아이디어


참고 : 투자의 목적이 있다면 1차적으로 해당 코인의 github를 검색해서 업데이트가 자주 되는지 확인

베수나 가나시로 스마트 컨트랙트 활용 실습 + 지갑

실습전 개념 보충 설명

* `암호화폐` - **코인과 토큰**을 이쁘게 부르기 위한 방법
* `가상화폐` - **코인과 토큰**을 이쁘게 부르기 위한 방법
* `코인` - 본인의 자체적인 플랫폼을 가지고 있는 블록체인에서 발행하는 가상(암호)화폐를 코인이라 한다 (ex. Eos, bitcoin, ethereum)
* `토큰` - 자체적인 플랫폼 없이 특정 플랫폼에 종속되어서 코인을 생성하는 형태
* `스테이블 코인` - $1 = (정해진) 코인의 **가치를 가지도록** 하겠다. 변동성을 줄인다는 것.
  * 실제로 있는 개념이다. (핸드폰 마일리지, 게임 캐시 재화, 현대백화점 포인트)
  * 만원 = 1포인트 (머지포인트 사태)
* `CBDC (중앙은행)` - 2022년 까지 중국에서 가상화폐
  * 토근 or 코인 --> 발행 주체 및 관리를 **국가**에서 해준다. 1000원 = 1코인
  * 이또한 실제 있는 개념. (지역화폐, 경기도 지역화폐, 전라도 지역화폐, 경상도 지역화폐, 광주시 지역화폐, 전북 지역화폐)
  * 다만, 코로나로 인해 아직이다.

그래도 `지갑`을 만들어서 `스마트 컨트랙트`에서 하던 구동을 개인이 코드 작성해서 똑같이  
구동이 가능하단점을 알 수 있게 되었다.  

`deploy(배포)`가 된건 체인에 **created**된 느낌이고 이때 생성된 주소가 `deploy`된 **스마트 컨트랙트 주소**이다.  
=> 해당 주소(**deploy된 스마트 컨트랙트 주소**)를 가지고,   
발행한 토큰을 `Metamask` 에서 가져올 수 있다(참고 : 계정 가져오는건 **Public Key**)  

`PK(private key)` 사용해서 계정 가져왔고(`지갑`을 가져온것이다)  
`public key` 사용해서 블록 주고받았다(`거래`)



## 블록체인 기반의 DAPP 시스템

* SC = 스마트컨트랙트, BC = 블록체인을 의미

* 강사님은 블록체인 기반의 앱 시스템은 아래처럼 생각하신다고 하신다  
  무조건 옳다는건 아니고 강사님의 경험상 아래 형태라고 하셨다

**큰틀 : BC <----> SDK <----> 화면**

**세부사항 : BC <----> SC <---> SDK <---> Node.js <---> UI <---> 사용자**


## 후기

여기까지 오니까 어떤느낌인지 대략 감이온다.  
우리가 지금 하고있는건 BC부분인 블록체인 서버를 구성하고 있는것 같다.

`genesis.json`에 정의한 `balance` 외에 다른값도 보낼수 있냐는 질문에대한 강사님이 답변

`비트코인`은 `스마트컨트랙트`가 없어서 **1대1**로 주고받는데,  
`이더리움`은 `스마트컨트랙트`가 있어서 코인 외의 **사용자 정의 데이터** 또한 보낼수 있다고 한다.  
파일 자체를 아예 줄수있는건 아니고, **스마트컨트랙트 형태**로 보내고 받는다고 한다.  
즉, "hello world"를 그대로 보내진 않고 디코드, 인코드해서 **다른 형태**로 주고 받는다.  
요즘은 모르지만 이전엔 32KB 용량 이상이 안되는걸로 알고 있다. 글자는 10000자 정도까지 였다.   
따라서 사진을 보내고싶어도 요즘사진은 10M 이렇게되니 사진데이터 넣어 보내기 어렵다.  
다만, 32KB 이내인 간단한 데이터는 충분히 이더리움에 보낼수 있다.   
=> ex) NFT의 유명한 [opensea](https://opensea.io/explore-collections) 생각해보면, Img 파일 저장된곳 URL을 이더리움에 데이터로 넣어서 활용했다.

그래서 큰 데이터는 나눠서 받는 기법을 사용해서 토렌트처럼 조각을 내서 하겠다는 얘기는 예전부터 있는데, 아직 해결이 되진 않았다고 한다. 즉, 이론적으론 가능한일이 많은데 실제론 아직 안되는 일들이 많다고 한다.

블록체인 기업 취업 준비를 원한다면??  
포트폴리오를 지갑 정도 만들면 좋을것 같다고 한다.

블록체인 유명한 회사 - 람다256.. 등  
대기업의 경우는 한 부서로 보통 운영...

그 기업이 뭘 하는지 뭘 개발할거고, 블록체인은 기본적으로 본인들의 소스를 공유하는게 암묵적 규칙인데 스마트컨트랙트 소스정돈 공유했는지, 깃이 잘 있는지, 깃이 잘 업데이트가 되는지 등을 확인해서 안좋은 기업 판별하는것을 추천한다.



참고로

**mastering bitcoin(이론), mastering ethereum(실습)** 두가지 책을 제일 추천한다고 한다.


`비 대칭키`는 **Pubilc key, private key**가 존재한다. **블록체인도 마찬가지**이다.
**데이터의 출처를 밝히기 위해서 Key를 사용**  

Node A -- (txt1) --> Private Key -> Signature -> Signature, Public Key -> Node B

해커 -- (txt2) --> Node B   
이 경우 Public Key가 없으니 txt2를 받지 않음. 안전.  
왜냐하면 Node B는 Public Key를 통해 Signature을 확인하고 txt1을 잘 받아오기 때문.


## Smart Contract

**`코드의 조각`이며 블록체인과 상호작용하는 인터페이스**이다.  
`이더리움에 적용`하였다.
스마트 컨트랙트 생성 -> 바이트 코드 변환 -> 블록에 저장 -> 블록체인에 저장  
                                   컴파일                        배포

## 키, 주소, 지갑

개인키 -- ESDSA -->  공개키 -- Hash --> 주소

**ESDSA(타원곡선 디지털서명 알고리즘)**도 다양한 알고리즘이 존재

합의 알고리즘(예:POW=작업증명)
비트코인의 총량이 약 2100만 비트코인으로 고정되어 있고,  
2140년이 될동안 작업증명(채굴)을 통해 생성된다.    
해시 알고리즘의 특징을 활용하여 사용된 알고리즘이다. 
10분안에 풀수 있도록 되어있다.  

nonce값은 문제의 정답인데, 10분 보다 너무 빨리 맞추게되면 난이도를 diff나 등등 올려서 nonce값이 좀 더 어려워진다. 반대로 10분 보다 너무 늦게 맞추게되면 nonce값이 좀 더 쉬워진다.

## 블록분기

6승인 덕분에 51% 어택이라는 **해킹에 안전을 보장**받을 수 있다.  

**강사님은 탄생은 비트코인이지만 블록체인의 활성화와 미래는 이더리움이 계속 주목받는다고 생각하신다.**

## 이더리움의 역사

`ICO`란 기업이 **주식**에 상장하는것 처럼 `ICO`는 **코인**으로 한다는것.

`Defi`란 은행의 적금, 예금, 대출 이런 서비스들을 의미한다.

`NFT`란 스마트 컨트랙트 기반으로 동작한다.


**이더리움의 가스**

무한 루프등을 막기 위한 이더리움의 수수료  
트랜잭션 실행을 위해서는 가스를 지불해야함


## 이더리움 도구

[이더스캔](https://etherscan.io/) - 이더리움 네트워크가 어떻게 동작하는지 다 볼 수 있다.

[고 이더리움-geth](https://geth.ethereum.org/) - 해당 클라이언트 이용해서 이더리움 네트워크를 사용할 수 있음

[Remix](https://remix-project.org/) - 개발 툴(이클립스처럼)

[Ganache](https://trufflesuite.com/ganache/) - 이더리움 네트워크를 가상머신으로 돌려준다.

[Web3.js](https://web3js.readthedocs.io/en/v1.7.4/) - Web3.js 이다. 실제로 우리가아는 Web3랑은 다른 개념인 패키지이다.

`네트워크`는 노드(컴퓨터)간에 연결(요청, 응답)된 구조이고,   
모든 노드(컴퓨터)가 동일한 데이터(`블록체인`)를 보유한다.

`스마트 컨트랙트 배포`를 한다면? 블록체인에 블록을 추가할부분 찾아서(**pending**), 뒤에 추가하는 것 같다.  
그리고 추가되면 다른 노드(컴퓨터)들도 네트워크 연결(요청, 응답)을 통해 해당 추가한 블록을 가져가서  
**자신의 블록체인에 추가**하기 때문에 블록체인에 **블록 추가가 가능한 것 같다.**


## 하이퍼레저 베수

자바 언어로 작성된 이더리움 클라이언트  
**이더리움과 동일하게 동작**하며, **이더리움의 테스트 넷에서도 동작** 



2, 3, 4일차 md 확인하며 복습하고 나면 블로그 포스팅하고 마무리.
그담은 원래처럼 유튭 !



실습한것들
1. geth 설치 => 테스트넷 연동
2. ethereum private network => 메타마스크 연동
3. ganache(가상머신) => 메타마스크, 리믹스 연동
4. besu private network => 메타마스크, 리믹스 연동

5. smart contract 배포  
   => java의 getter, setter 형태로 스마트 컨트랙트에 데이터 저장 및 호출  
   => ERC 20 생성 with 오픈 제플린(git 소스) + Dapp 뼈대 만들기(지갑)   
   => ERC 721 생성 with 샘플 코드 and 오픈 제플린(git 소스)  
6. 생성된 ERC 721로 테스트넷에 배포하여 Token ID 확인 및 다른 사람에게 전송(NFT)



